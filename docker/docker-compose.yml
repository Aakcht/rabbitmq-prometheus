# https://docs.docker.com/compose/compose-file/
version: "3.6"

# https://docs.docker.com/compose/compose-file/#networks
networks:
  rabbitmq-prometheus:

# https://docs.docker.com/compose/compose-file/#volumes
volumes:
  rabbitmq-prometheus_prometheus:
  rabbitmq-prometheus_grafana:

services:
  rabbitmq1: &rabbitmq
    # https://hub.docker.com/r/pivotalrabbitmq/rabbitmq-prometheus/tags
    image: pivotalrabbitmq/rabbitmq-prometheus:3.8.0-alpha.659-2019.05.15
    networks:
      - "rabbitmq-prometheus"
    ports:
      - "5672:5672"
      - "15670:25672"
      - "15672:15672"
      - "15692:15692"
    # https://unix.stackexchange.com/questions/71940/killing-tcp-connection-in-linux
    # https://en.wikipedia.org/wiki/Tcpkill
    # https://www.digitalocean.com/community/tutorials/iptables-essentials-common-firewall-rules-and-commands#block-an-ip-address
    cap_add:
      - ALL
    hostname: rabbitmq1
    environment:
      RABBITMQ_ERLANG_COOKIE: rabbitmq-prometheus
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq-definitions.json:/etc/rabbitmq/rabbitmq-definitions.json
    # we want to simulate hitting thresholds
    ulimits:
      nofile:
        soft: "1024"
        hard: "2048"
  rabbitmq2:
    << : *rabbitmq
    hostname: rabbitmq2
    ports:
      - "6672:5672"
      - "25670:25672"
      - "25672:15672"
      - "25692:15692"
  rabbitmq3:
    << : *rabbitmq
    hostname: rabbitmq3
    ports:
      - "7672:5672"
      - "35670:25672"
      - "35672:15672"
      - "35692:15692"
  publisher-confirms:
    # https://hub.docker.com/r/pivotalrabbitmq/perf-test/
    image: &perf-test-image pivotalrabbitmq/perf-test:dev-2019.05.07
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq1:5672/%2f"
      QUEUE: publisher-confirms
      ROUTING_KEY: publisher-confirms
      AUTOACK: "true"
      VARIABLE_RATE: "12:30,25:30,50:30,100:30"
      CONFIRM: 1
      CONFIRM_TIMEOUT: 1
      SERVERS_STARTUP_TIMEOUT: 30
  unroutable-return:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
      VARIABLE_RATE: "2:30,4:30,10:30"
      VARIABLE_SIZE: "100:30,200:30"
      CONSUMERS: 0
      FLAG: mandatory
      SERVERS_STARTUP_TIMEOUT: 30
  unroutable-drop:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
      VARIABLE_RATE: "5:30,10:30,20:30"
      VARIABLE_SIZE: "100:30,200:30"
      CONSUMERS: 0
      SERVERS_STARTUP_TIMEOUT: 30
  slow-consumer-persistent:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq3:5672/%2f"
      QUEUE: ha3-slow-consumer-persistent
      ROUTING_KEY: slow-consumer-persistent
      QUEUE_ARGS: x-max-length=500
      FLAG: persistent
      AUTO_DELETE: "false"
      SIZE: 51200
      VARIABLE_RATE: "20:20,0:25"
      CONSUMER_RATE: 10
      QOS: 10
      AUTOACK: "false"
      SERVERS_STARTUP_TIMEOUT: 30
  basic-get:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
      QUEUE: basic-get
      ROUTING_KEY: basic-get
      VARIABLE_RATE: "1:1,0:30"
      POLLING: "true"
      POLLING_INTERVAL: 5000
      AUTOACK: "false"
      SERVERS_STARTUP_TIMEOUT: 30
  basic-get-auto:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
      QUEUE: basic-get
      ROUTING_KEY: basic-get
      PRODUCERS: 0
      POLLING: "true"
      POLLING_INTERVAL: 5000
      AUTOACK: "true"
      SERVERS_STARTUP_TIMEOUT: 30
  nack:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    entrypoint: []
    command: /bin/bash -c "while true; do bin/runjava com.rabbitmq.perf.PerfTest; sleep 10; done"
    environment:
      TIME: 60
      URI: "amqp://guest:guest@rabbitmq1:5672/%2f"
      VARIABLE_RATE: "1:10,0:20"
      QUEUE: nack
      QUEUE_ARGS: x-max-length=100
      ROUTING_KEY: nack
      AUTOACK: "false"
      NACK: "true"
      QOS: 5
      CONSUMER_LATENCY: 3000000
      SERVERS_STARTUP_TIMEOUT: 30
  # max1: &max
  #   image: pivotalrabbitmq/perf-test:dev-2019.05.07
  #   networks:
  #     - "rabbitmq-prometheus"
  #   environment:
  #     URI: "amqp://guest:guest@rabbitmq1:5672/%2f"
  #     QUEUE_PATTERN: "ha3-max1-%d"
  #     QUEUE_PATTERN_FROM: 1
  #     QUEUE_PATTERN_TO: 10
  #     PRODUCERS: 10
  #     CONSUMERS: 10
  #     ROUTING_KEY: max1
  #     SIZE: 512000
  #     QOS: 100
  #     AUTOACK: "false"
  #     SERVERS_STARTUP_TIMEOUT: 30
  # prometheus:
  #   image: prom/prometheus:v2.9.0
  #   networks:
  #     - "rabbitmq-prometheus"
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - rabbitmq-prometheus_prometheus:/prometheus
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  # max2:
  #   << : *max
  #   environment:
  #     URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
  #     QUEUE_PATTERN: "ha3-max2-%d"
  #     QUEUE_PATTERN_FROM: 1
  #     QUEUE_PATTERN_TO: 10
  #     PRODUCERS: 10
  #     CONSUMERS: 10
  #     ROUTING_KEY: max2
  #     SIZE: 512000
  #     QOS: 100
  #     AUTOACK: "false"
  #     SERVERS_STARTUP_TIMEOUT: 30
  # max3:
  #   << : *max
  #   environment:
  #     URI: "amqp://guest:guest@rabbitmq3:5672/%2f"
  #     QUEUE_PATTERN: "ha3-max3-%d"
  #     QUEUE_PATTERN_FROM: 1
  #     QUEUE_PATTERN_TO: 10
  #     PRODUCERS: 10
  #     CONSUMERS: 10
  #     ROUTING_KEY: max3
  #     SIZE: 512000
  #     QOS: 100
  #     AUTOACK: "false"
  #     SERVERS_STARTUP_TIMEOUT: 30
  prometheus:
    image: prom/prometheus:v2.9.0
    networks:
      - "rabbitmq-prometheus"
    ports:
      - "9090:9090"
    volumes:
      - rabbitmq-prometheus_prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    # https://hub.docker.com/r/grafana/grafana/
    image: grafana/grafana:6.1.3
    ports:
      - "3000:3000"
    networks:
      - "rabbitmq-prometheus"
    volumes:
      - rabbitmq-prometheus_grafana:/var/lib/grafana
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana/dashboards:/dashboards
    environment:
      # https://grafana.com/plugins/flant-statusmap-panel
      # https://grafana.com/plugins/grafana-polystat-panel
      # https://grafana.com/plugins/jdbranham-diagram-panel
      # https://grafana.com/plugins/michaeldmoore-multistat-panel
      # https://grafana.com/plugins/natel-discrete-panel
      # https://grafana.com/plugins/vonage-status-panel
      # https://grafana.com/plugins/yesoreyeram-boomtable-panel
      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-polystat-panel,jdbranham-diagram-panel,michaeldmoore-multistat-panel,natel-discrete-panel,vonage-status-panel,yesoreyeram-boomtable-panel"
