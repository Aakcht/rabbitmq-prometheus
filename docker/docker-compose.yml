# https://docs.docker.com/compose/compose-file/
version: "3.6"

# https://docs.docker.com/compose/compose-file/#networks
networks:
  rabbitmq-prometheus:

# https://docs.docker.com/compose/compose-file/#volumes
volumes:
  rabbitmq-prometheus_prometheus:
  rabbitmq-prometheus_grafana:

services:
  rabbitmq1: &rabbitmq
    # https://hub.docker.com/r/pivotalrabbitmq/rabbitmq-prometheus/tags
    image: pivotalrabbitmq/rabbitmq-prometheus:3.8-2019.04.23
    networks:
      - "rabbitmq-prometheus"
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    hostname: rabbitmq1
    environment:
      RABBITMQ_ERLANG_COOKIE: rabbitmq-prometheus
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    # we want to simulate hitting thresholds
    ulimits:
      nofile:
        soft: "1024"
        hard: "2048"
  rabbitmq2:
    << : *rabbitmq
    hostname: rabbitmq2
    ports:
      - "6672:5672"
      - "25672:15672"
      - "25692:15692"
  rabbitmq3:
    << : *rabbitmq
    hostname: rabbitmq3
    ports:
      - "7672:5672"
      - "35672:15672"
      - "35692:15692"
  published-confirmed:
    # https://hub.docker.com/r/pivotalrabbitmq/perf-test/
    image: &perf-test-image pivotalrabbitmq/perf-test:dev-2019.04.24
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq1:5672/%2f"
      QUEUE: published-confirmed
      RATE: 10
      CONFIRM: 1
      CONFIRM_TIMEOUT: 1
      START_TIMEOUT: 30
  published-unroutable:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq2:5672/%2f"
      RATE: 20
      CONSUMERS: 0
      FLAG: mandatory
      START_TIMEOUT: 30
  slow-consumer:
    image: *perf-test-image
    networks:
      - "rabbitmq-prometheus"
    environment:
      URI: "amqp://guest:guest@rabbitmq3:5672/%2f"
      QUEUE: slow-consumer
      QUEUE_ARGS: x-max-length=1000
      RATE: 30
      CONSUMER_RATE: 20
      AUTOACK: "false"
      QOS: 40
      START_TIMEOUT: 30
  prometheus:
    image: prom/prometheus:v2.9.0
    networks:
      - "rabbitmq-prometheus"
    ports:
      - "9090:9090"
    volumes:
      - rabbitmq-prometheus_prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    # https://hub.docker.com/r/grafana/grafana/
    image: grafana/grafana:6.1.3
    ports:
      - "3000:3000"
    networks:
      - "rabbitmq-prometheus"
    volumes:
      - rabbitmq-prometheus_grafana:/var/lib/grafana
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana/dashboards:/dashboards
